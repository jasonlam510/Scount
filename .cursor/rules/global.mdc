
# Scount Project Rules

## Code Style and Structure:
- Use concise functional React Native components with TypeScript.
- Prefer hooks and context for state management; avoid classes.
- Structure files: components, hooks, screens, i18n, database, utils, services.
- Use React Navigation for navigation (bottom tabs, stack navigation).
- Follow offline-first architecture: AsyncStorage for preferences, future WatermelonDB for data.
- Keep i18n (react-i18next) strings in JSON under locales/, use translation keys in code.
- Use theme context for dark/light/automatic modes; avoid hard-coded colors.

## Naming Conventions:
- Use lowercase-dashes for directories (components/expense-card).
- Screens: PascalCase (screens/Group/GroupScreen.tsx).
- Hooks: use prefix `use` (useTheme.tsx, useExpenses.tsx).
- Prefer named exports for components, hooks, and utilities.

## TypeScript Specific:
- Use interfaces for all data models (Expense, Group, Participant, User).
- Use string literals or maps instead of enums.
- Avoid unnecessary React.FC typing unless children are used.
